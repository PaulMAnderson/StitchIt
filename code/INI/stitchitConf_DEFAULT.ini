;; For more information on setting up the INI file see the StitchIt wiki at: https://github.com/BaselLaserMouse/StitchIt/wiki
;; To read the INI file into MATLAB as a structure run: userConfig=readStitchItINI



;;----------------------------------------------------------------------------
;; sub-directories
;; When StitchIt runs it looks for certain data in particular places and creates
;; certain directories as it runs. The names of these directories are defined
;; here. There should be no reason to ever change these values. It is not 
;; recommended that you change the settings in subdir.
;; Note that in all cases, to avoid creating a sub-directory simply set the directory
;; name to "."

[subdir]
;; The raw data (which can be compressed once sections are build)
rawDataDir=rawData

;; Pre-processing (tile stats, section average files, etc) data are kept in 
;; rawDataDir/preProcessDir
preProcessDir=stitchitPreProcessingFiles

;; The average images (this is a sub-directory within rawDataDir)
averageDir=averageDir

;; The stitched images. full size images in stitchedDirBaseName_100, 50% size in stitchedDirBaseName_050
stitchedDirBaseName=stitchedImages

;; Data that will be sent to the web (see syncAndCrunch) go here
WEBdir=forWWW




;;----------------------------------------------------------------------------
[tile]
;; These settings influence how tiles are loaded by the tileLoad command. 

;;Whether to crop tiles as they're loaded 
;;(StitchIt does not alter the raw data and does not replace tiles with cropped versions)
docrop=1

;;What proportion of the tile to crop. This much is cropped from each edge.
cropProportion=0.0216

;;Correct tile illumination on loading before stitching 
doIlluminationCorrection=1

;;The type of illumination correction to perform. "split" - odd and even rows
;;processed separately. "pool" - pool averages from odd and even rows
illumCorType=split

;;Use saved coefficients to correct comb artifact
doPhaseCorrection=0

;;If a tileStats file is present and it contains an offset value, this is subtracted
;;from tiles prior to loading. This is relevent for systems that save images as
;;signed ints. Has no effect on TissueCyte data, which are signed.
doOffsetSubtraction=1

;;This is the second argument passed to rot90 after tiles are loaded. 
;;If your tiles are oddly rotated and stitching looks like it failed. Try
;;changing this value. Valid values are: -2, -1, 0, 1, and 2
;;0 means no rotation
tileRotate=0

;;This determines whether or not tiles should be flipped left/right after being rotated
tileFlipLR=0


;;----------------------------------------------------------------------------
;; analyse tiles uses these values
[analyse]

;;lowValueThreshold - tiles with means smaller than this number don't contribute
;;to illumination correction. 
;; TODO: NO LONGER USING THIS. THIS SETTING IS UNDER FLUX. SEE preProcessTiles and writeAverageFiles
lowValueThreshold=5

;;comb correction bands - into how many strips to divide the image for comb correction
;;see calcPhaseDelayShifts
nbands=9


;;----------------------------------------------------------------------------
;;stitchSection looks at the following to decide what to do
[stitching]

;; Stitch based on stage coordinates. This may well make things worse.
doStageCoords=0

;; fusion weight is how much blending we do at tile borders. currently 0 is no blending and 1 blending. 
fusionWeight=0

;; flip completed section up/down 
flipud=1

;; flip completed section left/right
fliplr=0

;; rotate the section if needed (this is the second input argument to a rot90, so 0 means no rotation)
rotate=0


;; The following two settings relate to whether the TIFFs should be compressed. Likely the
;; most sensible configuration if you want compression is to save compressed cropped images
;; but not compressed the stitched data, as these will discarded and compression slows down
;; processing. 

;; save LZW compressed tiffs after stitching? Set to 0 for no compression and 1 for compression
saveCompressedStitched=0

;; save LZW compressed tiffs after cropping? Set to 0 for no compression and 1 for compression
saveCompressedCropped=0


;;----------------------------------------------------------------------------
;;syncAndCrunch settings
[syncAndCrunch]

;; Default directory on the local machine on which data land when syncAndCrunch is run. 
;; Set to zero if you do not wish to define this (it is recommended you do, however).
;; e.g. landingDirectory might be /mnt/data/anatomyStacks and all data directories will
;; go under that when syncAndCrunch pulls them in.
landingDirectory=0

;; Mount point of the Windows acquisition machine on the Linux analysis machine. This will
;; likely be a RAID volume to which the acquisition software saves data. syncAndCrunch
;; will copy data from this location to the landingDirectory. By supplying the path to the
;; the acquisition mount point you will be able to run syncAndCrunch without any input
;; arguments once you have started an acquisition. It will then automatically find the
;; latest acquisition and process it. 
acqMountPoint=0

;;Boolean to determine whether or not to build images to the web
sendToWeb=0

;;The webserver to host the images. You will need passwordless access to the server.
server=

;; The full path to the MATLAB executable. i.e. not the path to a script you are using
;; to start MATLAB on a day to day basis. This is needed in order to start a background
;; process for sending images to the web. 
;; e.g.  MATLABpath=/usr/local/MATLAB/R2017b/bin/matlab
;; You don't need to worry about whether StitchIt will be in the path, this will be taken 
;; care of by syncAndCrunch 
MATLABpath=

;; The rsync command is used to pull data from the buffer server to the local machine for pre-processing.
;; Here you can set the flag with which rsync runs during copying. Read the rsync documentation if you 
;; want to know what these do.
;; reasonable options include -a, -au, -r, -ru
rsyncFlag=-a

;;Provide the option for sending slack notifications, e-mails, whatever, during acquisition
;;if 0 we only report to the MATLAB screen. if 1 we send via notficationProtocol 
notifications=0

;;For Slack you will need to install https://github.com/DylanMuir/SlackMatlab in your path
notificationProtocol=slack

;; The user string associated with a Slack message. This can be anything, it doesn't have have to 
;; be a valid username in your Slack group. If slackUser is 0 (zero) no user string is transmitted. 
slackUser=@StitchIt

;; The following is the Slack hook url to which to send the data. if 0 no message is sent.
;; You will need to generate the Slack hook yourself so your messages are sent to the right
;; channel. Instructions are here: https://github.com/DylanMuir/SlackMatlab
slackHook=0

;; This is the function run post-acquisition. It must be in the MATLAB path, but not in the StitchIt install path
;; or you will run into issues when pulling changes. It should tand take no input arguments. e.g. if your
;; post-acquisition file is called "myPostAcq.m" then you coud place it in "~/MATLAB" and here you will edit the
;; line to say "postAcq=myPostAcq";; 
;; If postAcqFun=0 we run the default (postAcqFun). Do not edit this file unless you know what you're doing.
postAcqFun=0

;; The cut-off intensity value for the web preview. 
;; if <25 the threshold is this value times the mean for each channel and scaled by brain area <--RECOMENDED OPTION
;; if >25 as a hard threshold. 
rescaleThresh=6
